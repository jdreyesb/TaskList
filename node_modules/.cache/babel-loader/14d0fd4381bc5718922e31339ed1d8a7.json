{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, createTextVNode as _createTextVNode, vModelCheckbox as _vModelCheckbox, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, vShow as _vShow } from \"vue\";\nconst _hoisted_1 = {\n  class: \"todoapp\"\n};\nconst _hoisted_2 = {\n  class: \"header\"\n};\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Tareas\", -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = {\n  class: \"main\"\n};\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"toggle-all\"\n}, \"Marcar todas comocompletas \", -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = {\n  class: \"todo-list\"\n};\nconst _hoisted_7 = {\n  class: \"view\"\n};\nconst _hoisted_8 = [\"onClick\", \"checked\"];\nconst _hoisted_9 = [\"onDblclick\"];\nconst _hoisted_10 = [\"onClick\"];\nconst _hoisted_11 = [\"onUpdate:modelValue\", \"onBlur\", \"onKeyup\"];\nconst _hoisted_12 = {\n  class: \"footer\"\n};\nconst _hoisted_13 = {\n  class: \"todo-count\"\n};\nconst _hoisted_14 = [\"textContent\"];\nconst _hoisted_15 = {\n  class: \"filters\"\n};\n\nconst _hoisted_16 = /*#__PURE__*/_createElementVNode(\"footer\", {\n  class: \"info\"\n}, [/*#__PURE__*/_createElementVNode(\"p\", null, \"Doble click para editar la tarea\")], -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"section\", _hoisted_1, [_createElementVNode(\"header\", _hoisted_2, [_hoisted_3, _createTextVNode(\" \" + _toDisplayString(_ctx.database) + \" \", 1\n  /* TEXT */\n  ), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.getDataBase && $options.getDataBase(...args))\n  }, \"llamar a la lbd\"), _withDirectives(_createElementVNode(\"input\", {\n    class: \"new-todo\",\n    autofocus: \"\",\n    autocomplete: \"off\",\n    placeholder: \"Creaar una nueva tareas\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.newTodo = $event),\n    onKeyup: _cache[2] || (_cache[2] = _withKeys((...args) => $options.addTodo && $options.addTodo(...args), [\"enter\"]))\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, _ctx.newTodo]])]), _withDirectives(_createElementVNode(\"section\", _hoisted_4, [_withDirectives(_createElementVNode(\"input\", {\n    id: \"toggle-all\",\n    class: \"toggle-all\",\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $options.allDone = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelCheckbox, $options.allDone]]), _hoisted_5, _createElementVNode(\"ul\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredTodos, todo => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      class: _normalizeClass([\"todo\", {\n        completed: todo.completed,\n        editing: todo == _ctx.editedTodo\n      }]),\n      key: todo.id\n    }, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"input\", {\n      class: \"toggle\",\n      type: \"checkbox\",\n      onClick: $event => $options.updateTodo(todo),\n      checked: todo.completed\n    }, null, 8\n    /* PROPS */\n    , _hoisted_8), _createElementVNode(\"label\", {\n      onDblclick: $event => $options.editTodo(todo)\n    }, _toDisplayString(todo.title), 41\n    /* TEXT, PROPS, HYDRATE_EVENTS */\n    , _hoisted_9), _createElementVNode(\"button\", {\n      class: \"destroy\",\n      onClick: $event => $options.removeTodo(todo)\n    }, null, 8\n    /* PROPS */\n    , _hoisted_10)]), _withDirectives(_createElementVNode(\"input\", {\n      class: \"edit\",\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => todo.title = $event,\n      onBlur: $event => $options.doneEdit(todo),\n      onKeyup: [_withKeys($event => $options.doneEdit(todo), [\"enter\"]), _withKeys($event => $options.cancelEdit(todo), [\"esc\"])]\n    }, null, 40\n    /* PROPS, HYDRATE_EVENTS */\n    , _hoisted_11), [[_vModelText, todo.title]])], 2\n    /* CLASS */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])], 512\n  /* NEED_PATCH */\n  ), [[_vShow, _ctx.todos.length]]), _withDirectives(_createElementVNode(\"footer\", _hoisted_12, [_createElementVNode(\"span\", _hoisted_13, [_createElementVNode(\"strong\", {\n    textContent: _toDisplayString($options.remaining)\n  }, null, 8\n  /* PROPS */\n  , _hoisted_14), _createTextVNode(\" \" + _toDisplayString($options.pluralize(\"tarea\", $options.remaining)), 1\n  /* TEXT */\n  )]), _createElementVNode(\"ul\", _hoisted_15, [_createElementVNode(\"li\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = $event => _ctx.visibility = 'all'),\n    class: _normalizeClass([{\n      selected: _ctx.visibility == 'all'\n    }, \"btn\"])\n  }, \" Todas \", 2\n  /* CLASS */\n  )]), _createElementVNode(\"li\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = $event => _ctx.visibility = 'active'),\n    class: _normalizeClass([{\n      selected: _ctx.visibility == 'active'\n    }, \"btn\"])\n  }, \" Activas \", 2\n  /* CLASS */\n  )]), _createElementVNode(\"li\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = $event => _ctx.visibility = 'completed'),\n    class: _normalizeClass([{\n      selected: _ctx.visibility == 'completed'\n    }, \"btn\"])\n  }, \" Competas \", 2\n  /* CLASS */\n  )])]), _withDirectives(_createElementVNode(\"button\", {\n    class: \"clear-completed\",\n    onClick: _cache[7] || (_cache[7] = (...args) => $options.removeCompleted && $options.removeCompleted(...args))\n  }, \" Limpiar completadas \", 512\n  /* NEED_PATCH */\n  ), [[_vShow, _ctx.todos.length > $options.remaining]])], 512\n  /* NEED_PATCH */\n  ), [[_vShow, _ctx.todos.length]])]), _hoisted_16], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":"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","names":["class","_createElementVNode","for","_hoisted_3","_toDisplayString","_ctx","onClick","$options","autofocus","autocomplete","placeholder","$event","onKeyup","id","type","_hoisted_5","_createElementBlock","_Fragment","_renderList","todo","completed","editing","key","checked","onDblclick","title","_hoisted_9","onBlur","length","selected","_hoisted_16"],"sourceRoot":"","sources":["D:\\WEB PROGRESIVAS\\pwa-base\\src\\App.vue"],"sourcesContent":["<template>\n  <section class=\"todoapp\">\n    <header class=\"header\">\n      <h1>Tareas</h1>\n      {{ database }}\n      <button @click=\"getDataBase\">llamar a la lbd</button>\n      <input\n        class=\"new-todo\"\n        autofocus\n        autocomplete=\"off\"\n        placeholder=\"Creaar una nueva tareas\"\n        v-model=\"newTodo\"\n        @keyup.enter=\"addTodo\"\n      />\n    </header>\n    <section class=\"main\" v-show=\"todos.length\">\n      <input\n        id=\"toggle-all\"\n        class=\"toggle-all\"\n        type=\"checkbox\"\n        v-model=\"allDone\"\n      />\n      <label for=\"toggle-all\">Marcar todas comocompletas </label>\n      <ul class=\"todo-list\">\n        <li\n          class=\"todo\"\n          v-for=\"todo in filteredTodos\"\n          :key=\"todo.id\"\n          :class=\"{ completed: todo.completed, editing: todo == editedTodo }\"\n        >\n          <div class=\"view\">\n            <input\n              class=\"toggle\"\n              type=\"checkbox\"\n              @click=\"updateTodo(todo)\"\n              :checked=\"todo.completed\"\n            />\n            <label @dblclick=\"editTodo(todo)\">{{ todo.title }}</label>\n            <button class=\"destroy\" @click=\"removeTodo(todo)\"></button>\n          </div>\n          <input\n            class=\"edit\"\n            type=\"text\"\n            v-model=\"todo.title\"\n            @blur=\"doneEdit(todo)\"\n            @keyup.enter=\"doneEdit(todo)\"\n            @keyup.esc=\"cancelEdit(todo)\"\n          />\n        </li>\n      </ul>\n    </section>\n    <footer class=\"footer\" v-show=\"todos.length\">\n      <span class=\"todo-count\">\n        <strong v-text=\"remaining\"></strong>\n        {{ pluralize(\"tarea\", remaining) }}\n      </span>\n      <ul class=\"filters\">\n        <li>\n          <button\n            @click=\"visibility = 'all'\"\n            :class=\"{ selected: visibility == 'all' }\"\n            class=\"btn\"\n          >\n            Todas\n          </button>\n        </li>\n        <li>\n          <button\n            @click=\"visibility = 'active'\"\n            :class=\"{ selected: visibility == 'active' }\"\n            class=\"btn\"\n          >\n            Activas\n          </button>\n        </li>\n        <li>\n          <button\n            @click=\"visibility = 'completed'\"\n            :class=\"{ selected: visibility == 'completed' }\"\n            class=\"btn\"\n          >\n            Competas\n          </button>\n        </li>\n      </ul>\n      <button\n        class=\"clear-completed\"\n        @click=\"removeCompleted\"\n        v-show=\"todos.length > remaining\"\n      >\n        Limpiar completadas\n      </button>\n    </footer>\n  </section>\n  <footer class=\"info\">\n    <p>Doble click para editar la tarea</p>\n  </footer>\n</template>\n\n<script>\nexport default {\n  name: \"App\",\n  data: () => ({\n    todos: [],\n    newTodo: \"\",\n    editedTodo: null,\n    visibility: \"all\",\n    database: null,\n  }),\n\n  computed: {\n    activeTasks() {\n      return this.todos.filter((todo) => !todo.completed);\n    },\n    filteredTodos() {\n      if (this.visibility === \"all\") {\n        return this.todos;\n      } else if (this.visibility === \"active\") {\n        return this.activeTasks;\n      } else {\n        return this.todos.filter((todo) => todo.completed);\n      }\n    },\n    remaining() {\n      return this.activeTasks.length;\n    },\n    allDone: {\n      get() {\n        return this.remaining === 0;\n      },\n      set(value) {\n        this.todos.forEach((todo) => {\n          todo.completed = value;\n        });\n      },\n    },\n  },\n  async created() {\n    this.todos = await this.getTodoStore();\n  },\n  methods: {\n    addTodo() {\n      const value = this.newTodo && this.newTodo.trim();\n      const todoItem = {\n        id: this.todos.length + 1,\n        title: value,\n        completed: false,\n      };\n\n      if (!value) {\n        return;\n      }\n      this.todos.push(todoItem); //SE GUARDA EN EL ARREGLO\n      this.saveTodo(todoItem); //SE GUARDA EN INDEXDB\n      this.newTodo = \"\";\n    },\n\n    cancelEdit(todo) {\n      this.editedTodo = null;\n      todo.title = this.beforeEditCache;\n    },\n\n    doneEdit(todo) {\n      if (!this.editedTodo) {\n        return;\n      }\n      this.editedTodo = null;\n      todo.title = todo.title.trim();\n      this.saveTodo({\n        ...todo,\n        title: todo.title,\n      });\n      if (!todo.title) {\n        this.removeTodo(todo);\n      }\n    },\n    editTodo(todo) {\n      this.beforeEditCache = todo.title;\n      this.editedTodo = todo;\n    },\n\n    pluralize(word, count) {\n      return word + (count === 1 ? \"\" : \"s\");\n    },\n\n    removeCompleted() {\n      this.todos = this.todos.filter((item) => {\n        if (item.completed) {\n          this.deleteTodo(item);\n        } else {\n          return !item.completed;\n        }\n      });\n    },\n\n    removeTodo(todo) {\n      const index = this.todos.indexOf(todo);\n      this.todos.splice(index, 1);\n      this.deleteTodo(todo);\n    },\n\n    updateTodo(todo) {\n      this.todos.find((item) => item === todo).completed = !todo.completed;\n      this.saveTodo({\n        ...todo,\n      });\n    },\n    async getDataBase() {\n      return new Promise((resolve, reject) => {\n        if (this.database) {\n          resolve(this.database);\n        }\n\n        let request = window.indexedDB.open(\"tododb\", 1);\n\n        request.onerror = (event) => {\n          this.database = event.target.result;\n          reject(\"Error\");\n        };\n\n        request.onsuccess = (event) => {\n          this.database = event.target.result;\n          resolve(this.database);\n        };\n\n        request.onupgradeneeded = (event) => {\n          let database = event.target.result;\n          database.createObjectStore(\"todos\", {\n            autoIncrement: true,\n            keyPath: \"id\",\n          });\n        };\n      });\n    },\n    async getTodoStore() {\n      this.database = await this.getDataBase();\n\n      return new Promise((resolve, reject) => {\n        const transaction = this.database.transaction(\"todos\", \"readwrite\");\n        const store = transaction.objectStore(\"todos\");\n        let todoList = [];\n        store.openCursor().onsuccess = (event) => {\n          const cursor = event.target.result;\n          if (cursor) {\n            todoList.push(cursor.value);\n            cursor.continue();\n          }\n        };\n\n        transaction.oncomplete = () => {\n          resolve(todoList);\n        };\n\n        transaction.onerror = (event) => {\n          reject(event);\n        };\n      });\n    },\n    async saveTodo(todo) {\n      this.database = await this.getDataBase();\n\n      return new Promise((resolve, reject) => {\n        const transaction = this.database.transaction(\"todos\", \"readwrite\");\n        const store = transaction.objectStore(\"todos\");\n\n        store.put(todo);\n\n        transaction.oncomplete = () => {\n          resolve(\"El item se agrego correctamente\");\n        };\n\n        transaction.onerror = (event) => {\n          reject(event);\n        };\n      });\n    },\n\n    async deleteTodo(todo) {\n      this.database = await this.getDataBase();\n      return new Promise((resolve, reject) => {\n        const transaction = this.database.transaction(\"todos\", \"readwrite\");\n        const store = transaction.objectStore(\"todos\");\n        store.delete(todo.id);\n        transaction.oncomplete = () => {\n          resolve(\"todo eleiminado\");\n        };\n        transaction.onerror = (event) => {\n          reject(event);\n        };\n      });\n    },\n  },\n};\n</script>\n<style>\n@import \"./styles/todomvc-base.css\";\n@import \"./styles/todomvc-index.css\";\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\nnav {\n  padding: 30px;\n}\n\nnav a {\n  font-weight: bold;\n  color: #2c3e50;\n}\n\nnav a.router-link-exact-active {\n  color: #42b983;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}