{"ast":null,"code":"export default {\n  name: \"App\",\n  data: () => ({\n    todos: [],\n    newTodo: \"\",\n    editedTodo: null,\n    visibility: \"all\",\n    database: null\n  }),\n  computed: {\n    activeTasks() {\n      return this.todos.filter(todo => !todo.completed);\n    },\n\n    filteredTodos() {\n      if (this.visibility === \"all\") {\n        return this.todos;\n      } else if (this.visibility === \"active\") {\n        return this.activeTasks;\n      } else {\n        return this.todos.filter(todo => todo.completed);\n      }\n    },\n\n    remaining() {\n      return this.activeTasks.length;\n    },\n\n    allDone: {\n      get() {\n        return this.remaining === 0;\n      },\n\n      set(value) {\n        this.todos.forEach(todo => {\n          todo.completed = value;\n        });\n      }\n\n    }\n  },\n\n  async created() {\n    this.todos = await this.getTodoStore();\n  },\n\n  methods: {\n    addTodo() {\n      const value = this.newTodo && this.newTodo.trim();\n      const todoItem = {\n        id: this.todos.length + 1,\n        title: value,\n        completed: false\n      };\n\n      if (!value) {\n        return;\n      }\n\n      this.todos.push(todoItem); //SE GUARDA EN EL ARREGLO\n\n      this.saveTodo(todoItem); //SE GUARDA EN INDEXDB\n\n      this.newTodo = \"\";\n    },\n\n    cancelEdit(todo) {\n      this.editedTodo = null;\n      todo.title = this.beforeEditCache;\n    },\n\n    doneEdit(todo) {\n      if (!this.editedTodo) {\n        return;\n      }\n\n      this.editedTodo = null;\n      todo.title = todo.title.trim();\n      this.saveTodo({ ...todo,\n        title: todo.title\n      });\n\n      if (!todo.title) {\n        this.removeTodo(todo);\n      }\n    },\n\n    editTodo(todo) {\n      this.beforeEditCache = todo.title;\n      this.editedTodo = todo;\n    },\n\n    pluralize(word, count) {\n      return word + (count === 1 ? \"\" : \"s\");\n    },\n\n    removeCompleted() {\n      this.todos = this.todos.filter(item => {\n        if (item.completed) {\n          this.deleteTodo(item);\n        } else {\n          return !item.completed;\n        }\n      });\n    },\n\n    removeTodo(todo) {\n      const index = this.todos.indexOf(todo);\n      this.todos.splice(index, 1);\n      this.deleteTodo(todo);\n    },\n\n    updateTodo(todo) {\n      this.todos.find(item => item === todo).completed = !todo.completed;\n      this.saveTodo({ ...todo\n      });\n    },\n\n    async getDataBase() {\n      return new Promise((resolve, reject) => {\n        if (this.database) {\n          resolve(this.database);\n        }\n\n        let request = window.indexedDB.open('tododb', 1);\n\n        request.onerror = event => {\n          this.database = event.target.result;\n          reject(\"Error\");\n        };\n\n        request.onsuccess = event => {\n          this.database = event.target.result;\n          resolve(this.database);\n        };\n\n        request.onupgradeneeded = event => {\n          let database = event.target.result;\n          database.createObjectStore('todos', {\n            autoIncrement: true,\n            keyPath: 'id'\n          });\n        };\n      });\n    },\n\n    async getTodoStore() {\n      this.database = await this.getDataBase();\n      return new Promise((resolve, reject) => {\n        const transaction = this.database.transaction('todos', 'readwrite');\n        const store = transaction.objectStore('todos');\n        let todoList = [];\n\n        store.openCursor().onsuccess = event => {\n          const cursor = event.target.result;\n\n          if (cursor) {\n            todoList.push(cursor.value);\n            cursor.continue();\n          }\n        };\n\n        transaction.oncomplete = () => {\n          resolve(todoList);\n        };\n\n        transaction.onerror = event => {\n          reject(event);\n        };\n      });\n    },\n\n    async saveTodo(todo) {\n      this.database = await this.getDataBase();\n      return new Promise((resolve, reject) => {\n        const transaction = this.database.transaction('todos', 'readwrite');\n        const store = transaction.objectStore('todos');\n        store.put(todo);\n\n        transaction.oncomplete = () => {\n          resolve(\"El item se agrego correctamente\");\n        };\n\n        transaction.onerror = event => {\n          reject(event);\n        };\n      });\n    },\n\n    async deleteTodo(todo) {\n      this.database = await this.getDataBase();\n      return new Promise((resolve, reject) => {\n        const transaction = this.database.transaction('todos', 'readwrite');\n        const store = transaction.objectStore('todos');\n        store.delete(todo.id);\n\n        transaction.oncomplete = () => {\n          resolve('todo eleiminado');\n        };\n\n        transaction.onerror = event => {\n          reject(event);\n        };\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["name","data","todos","newTodo","editedTodo","visibility","database","computed","activeTasks","filter","todo","completed","filteredTodos","remaining","length","allDone","get","set","value","forEach","created","getTodoStore","methods","addTodo","trim","todoItem","id","title","push","saveTodo","cancelEdit","beforeEditCache","doneEdit","removeTodo","editTodo","pluralize","word","count","removeCompleted","item","deleteTodo","index","indexOf","splice","updateTodo","find","getDataBase","Promise","resolve","reject","request","window","indexedDB","open","onerror","event","target","result","onsuccess","onupgradeneeded","createObjectStore","autoIncrement","keyPath","transaction","store","objectStore","todoList","openCursor","cursor","continue","oncomplete","put","delete"],"sourceRoot":"","sources":["D:\\WEB PROGRESIVAS\\pwa-base\\src\\App.vue"],"sourcesContent":["<template>\n  <section class=\"todoapp\">\n    <header class=\"header\">\n      <h1>Tareas</h1>\n      {{database}}\n      <button @click=\"getDataBase\">llamar a la lbd</button>\n      <input\n        class=\"new-todo\"\n        autofocus\n        autocomplete=\"off\"\n        placeholder=\"Creaar una nueva tareas\"\n        v-model=\"newTodo\"\n        @keyup.enter=\"addTodo\"\n      />\n    </header>\n    <section class=\"main\" v-show=\"todos.length\">\n      <input\n        id=\"toggle-all\"\n        class=\"toggle-all\"\n        type=\"checkbox\"\n        v-model=\"allDone\"\n      />\n      <label for=\"toggle-all\">Marcar todas comocompletas </label>\n      <ul class=\"todo-list\">\n        <li\n          class=\"todo\"\n          v-for=\"todo in filteredTodos\"\n          :key=\"todo.id\"\n          :class=\"{ completed: todo.completed, editing: todo == editedTodo }\"\n        >\n          <div class=\"view\">\n            <input\n              class=\"toggle\"\n              type=\"checkbox\"\n              @click=\"updateTodo(todo)\"\n              :checked=\"todo.completed\"\n            />\n            <label @dblclick=\"editTodo(todo)\">{{ todo.title }}</label>\n            <button class=\"destroy\" @click=\"removeTodo(todo)\"></button>\n          </div>\n          <input\n            class=\"edit\"\n            type=\"text\"\n            v-model=\"todo.title\"\n            @blur=\"doneEdit(todo)\"\n            @keyup.enter=\"doneEdit(todo)\"\n            @keyup.esc=\"cancelEdit(todo)\"\n          />\n        </li>\n      </ul>\n    </section>\n    <footer class=\"footer\" v-show=\"todos.length\">\n      <span class=\"todo-count\">\n        <strong v-text=\"remaining\"></strong>\n        {{ pluralize(\"tarea\", remaining) }}\n      </span>\n      <ul class=\"filters\">\n        <li>\n          <button\n            @click=\"visibility = 'all'\"\n            :class=\"{ selected: visibility == 'all' }\"\n            class=\"btn\"\n          >\n            Todas\n          </button>\n        </li>\n        <li>\n          <button\n            @click=\"visibility = 'active'\"\n            :class=\"{ selected: visibility == 'active' }\"\n            class=\"btn\"\n          >\n            Activas\n          </button>\n        </li>\n        <li>\n          <button\n            @click=\"visibility = 'completed'\"\n            :class=\"{ selected: visibility == 'completed' }\"\n            class=\"btn\"\n          >\n            Competas\n          </button>\n        </li>\n      </ul>\n      <button\n        class=\"clear-completed\"\n        @click=\"removeCompleted\"\n        v-show=\"todos.length > remaining\"\n      >\n        Limpiar completadas\n      </button>\n    </footer>\n  </section>\n  <footer class=\"info\">\n    <p>Doble click para editar la tarea</p>\n  </footer>\n</template>\n\n<script>\nexport default {\n  name: \"App\",\n  data: () => ({\n    todos: [],\n    newTodo: \"\",\n    editedTodo: null,\n    visibility: \"all\",\n    database: null,\n  }),\n\n  computed: {\n    activeTasks() {\n      return this.todos.filter((todo) => !todo.completed);\n    },\n    filteredTodos() {\n      if (this.visibility === \"all\") {\n        return this.todos;\n      } else if (this.visibility === \"active\") {\n        return this.activeTasks;\n      } else {\n        return this.todos.filter((todo) => todo.completed);\n      }\n    },\n    remaining() {\n      return this.activeTasks.length;\n    },\n    allDone: {\n      get() {\n        return this.remaining === 0;\n      },\n      set(value) {\n        this.todos.forEach((todo) => {\n          todo.completed = value;\n        });\n      },\n    },\n  },\n  async created(){\n    this.todos = await this.getTodoStore()\n  }, \n  methods: {\n    addTodo() {\n      const value = this.newTodo && this.newTodo.trim();\n      const todoItem = {\n        id: this.todos.length + 1,\n        title: value,\n        completed: false,\n      };\n\n      if (!value) {\n        return;\n      }\n      this.todos.push(todoItem); //SE GUARDA EN EL ARREGLO\n      this.saveTodo(todoItem); //SE GUARDA EN INDEXDB\n      this.newTodo = \"\";\n    },\n\n    cancelEdit(todo) {\n      this.editedTodo = null;\n      todo.title = this.beforeEditCache;\n    },\n\n    doneEdit(todo) {\n      if (!this.editedTodo) {\n        return\n      }\n      this.editedTodo = null\n      todo.title = todo.title.trim()\n      this.saveTodo({\n        ...todo,\n        title: todo.title\n      })\n      if (!todo.title) {\n        this.removeTodo(todo)\n      }\n    },\n    editTodo(todo) {\n      this.beforeEditCache = todo.title;\n      this.editedTodo = todo;\n    },\n\n    pluralize(word, count) {\n      return word + (count === 1 ? \"\" : \"s\");\n    },\n\n    removeCompleted() {\n      this.todos = this.todos.filter((item) => {\n        if (item.completed) {\n          this.deleteTodo(item)\n        } else {\n          return !item.completed\n        }\n      });\n    },\n\n    removeTodo(todo) {\n      const index = this.todos.indexOf(todo);\n      this.todos.splice(index, 1);\n       this.deleteTodo(todo)\n    },\n\n     updateTodo(todo) {\n      this.todos.find(item => item === todo).completed = !todo.completed\n      this.saveTodo({\n        ...todo\n      })\n    },\n    async getDataBase(){\n\n        return new Promise((resolve, reject) => {\n\n            if(this.database){\n              resolve(this.database)\n            }\n\n            let request = window.indexedDB.open('tododb',1);\n\n            request.onerror = event  => {\n              this.database = event.target.result\n              reject(\"Error\")\n            }\n\n            request.onsuccess = event  => {\n              this.database = event.target.result\n              resolve(this.database)\n            }\n\n            request.onupgradeneeded = event  => {\n              let database =  event.target.result\n              database.createObjectStore('todos', {\n                autoIncrement: true,\n                keyPath: 'id'\n              })\n              \n            }\n        })\n\n\n    },\n    async getTodoStore() {\n      this.database = await this.getDataBase()\n\n        return new Promise((resolve, reject) => {\n          const transaction = this.database.transaction('todos','readwrite')\n          const store = transaction.objectStore('todos')\n          let todoList = []\n          store.openCursor().onsuccess = event => {\n            const cursor = event.target.result\n            if(cursor){\n              todoList.push(cursor.value)\n              cursor.continue()\n            }\n          }\n\n          transaction.oncomplete = () => {\n            resolve(todoList)\n          }\n\n           transaction.onerror = event => {\n            reject(event)\n          }\n\n        })\n\n    }, \n    async saveTodo(todo){\n        this.database = await this.getDataBase()\n\n        return new Promise((resolve, reject) =>{\n            const transaction = this.database.transaction('todos','readwrite')\n            const store = transaction.objectStore('todos')\n\n            store.put(todo)\n\n            transaction.oncomplete = () => {\n            resolve(\"El item se agrego correctamente\")\n          }\n\n           transaction.onerror = event => {\n            reject(event)\n          }\n\n        })\n    },\n\n    async deleteTodo(todo) {\n      this.database = await this.getDataBase()\n      return new Promise((resolve, reject) => {\n        const transaction = this.database.transaction('todos', 'readwrite')\n        const store = transaction.objectStore('todos')\n        store.delete(todo.id)\n        transaction.oncomplete = () => {\n          resolve('todo eleiminado')\n        }\n        transaction.onerror = event => {\n          reject(event)\n        }\n      })\n    },\n\n  },\n};\n</script>\n<style>\n@import \"./styles/todomvc-base.css\";\n@import \"./styles/todomvc-index.css\";\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\nnav {\n  padding: 30px;\n}\n\nnav a {\n  font-weight: bold;\n  color: #2c3e50;\n}\n\nnav a.router-link-exact-active {\n  color: #42b983;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}